使用 JavaScript 类写 React 组件
  class Button extends React.Component {
    constructor(props) {
      super(props);
      this.id = Date.now();
    }
    render() {
      return <button id={this.id}>{this.props.label}</button>;
    }
  }
  // 使用
  ReactDOM.render(<Button label="Save" />, mountNode);

  class Button extends React.Component {
    clickCounter = 0;
    handleClick = () => {
      console.log(`Clicked: ${++this.clickCounter}`);
    };
    render() {
      return (
        <button id={this.id} onClick={this.handleClick}>
          {this.props.label}
        </button>
      );
    }
  }
  // 使用
  ReactDOM.render(<Button label="Save" />, mountNode);
  
  class CounterButton extends React.Component {
    state = {
      clickCounter: 0,
      currentTimestamp: new Date(),
    };

    handleClick = () => {
      this.setState((prevState) => {
       return { clickCounter: prevState.clickCounter + 1 };
      });
    };

    componentDidMount() {
     setInterval(() => {
       this.setState({ currentTimestamp: new Date() })
      }, 1000);
    }

    render() {
      return (
        <div>
          <button onClick={this.handleClick}>Click</button>
          <p>Clicked: {this.state.clickCounter}</p>
          <p>Time: {this.state.currentTimestamp.toLocaleString()}</p>
        </div>
      );
    }
  }
  // 使用
  ReactDOM.render(<CounterButton />, mountNode);

当处理 React 元素中的事件时，我们与 DOM API 的处理方式有两个非常重要的区别：
  所有 React 元素属性（包括事件）都使用 camelCase 命名，而不是 lowercase。例如是 onClick 而不是 onclick。
  我们将实际的 JavaScript 函数引用传递给事件处理程序，而不是字符串。例如是 onClick={handleClick} 而不是 onClick="handleClick"。
React 用自己的对象包装 DOM 对象事件以优化事件处理的性能，但是在事件处理程序内部，我们仍然可以访问 DOM 对象上所有可以访问的方法。React 将经过包装的事件对象传递给每个调用函数。例如，为了防止表单提交默认提交操作，你可以这样做：
  class Form extends React.Component {
    handleSubmit = (event) => {
      event.preventDefault();
      console.log('Form submitted');
    };

    render() {
      return (
        <form onSubmit={this.handleSubmit}>
          <button type="submit">Submit</button>
        </form>
      );
    }
  }
  // 使用
  ReactDOM.render(<Form />, mountNode);
  

以下仅适用于类组件（扩展 React.Component）。函数组件有一个稍微不同的故事。
  首先，我们定义了一个模板来创建组件中的元素。
  然后，我们在某处使用 React。例如，在 render 内部调用其他的组件，或者直接使用 ReactDOM.render。
  然后，React 实例化一个对象然后给它设置 props 然后我们可以通过 this.props 访问。这些属性都是我们在第 2 步传入的。
  因为这些全部都是 JavaScript，constructor 方法将会被调用（如果定义的话）。这是我们称之为的第一个：组件生命周期方法。
  接下来 React 计算渲染之后的输出方法（虚拟 DOM 节点）。
  因为这是 React 第一次渲染元素，React 将会与浏览器连通（代表我们使用 DOM API）来显示元素。这整个过程称为 mounting。
  接下来 React 调用另一个生命周期函数，称为 componentDidMount。我们可以这样使用这个方法，例如：在 DOM 上做一些我们现在知道的在浏览器中存在的东西。在此生命周期方法之前，我们使用的 DOM 都是虚拟的。
  一些组件的故事到此结束，其他组件得到卸载浏览器 DOM 中的各种原因。在后一种情况发生时，会调用另一个生命周期的方法，componentWillUnmount。
  任何 mounted 的元素的状态都可能会改变。该元素的父级可能会重新渲染。无论哪种情况，mounted 的元素都可能接收到不同的属性集。React 的魔力就是这儿，我们实际上需要的正是 React 的这一点！在这一点之前，说实话，我们并不需要 React。
  组价的故事还在继续，但是在此之前，我们需要理解我所说的这种状态。

现在我们知道了一个组件的状态，当该状态发生变化的时候，我们来了解一下关于这个过程的最后几个概念。
  当组件的状态被更新时，或者它的父进程决定更改它传递给组件的属性时，组件可能需要重新渲染。
  如果后者发生，React 会调用另一个生命周期方法：componentWillReceiveProps。
  如果状态对象或传递的属性改变了，React 有一个重要的决定要做：组件是否应该在 DOM 中更新？这就是为什么它调用另一个重要的生命周期方法 shouldComponentUpdate 的原因 。此方法是一个实际问题，因此，如果需要自行定制或优化渲染过程，则必须通过返回 true 或 false 来回答这个问题。
  如果没有自定义 shouldComponentUpdate，React 的默认事件在大多数情况下都能处理的很好。
  首先，这个时候会调用另一生命周期的方法：componentWillUpdate。然后，React 将计算新渲染过的输出，并将其与最后渲染的输出进行对比。
  如果渲染过的输出和之前的相同，React 不进行处理（不需要和浏览器先生对话）。
  如果有不同的地方，React 将不同传达给浏览器，像我们之前看到的那样。
  在任何情况下，一旦一个更新程序发生了，无论以何种方式（即使有相同的输出），React 会调用最后的生命周期方法：componentDidUpdate。
