props = properties
属性：一个事物的性质与关系
属性往往是与生俱来、无法自己改变的
1: 
  var HelloWorld = React.createClass({
      render: function () { 
          return <p>Hello, {this.props.name1 + ' ' + this.props.name2}</p>
      },
  });
  var HelloUniverse = React.createClass({
      getInitialState: function () {
          return {
              name1: 'Tim',
              name2: 'John',
          };
      },
      handleChange: function (event) {                
          this.setState({name: event.target.value});
      },
      render: function () {
          return <div>
          <HelloWorld {...this.state}></HelloWorld>
          <br/>
          <input type="text" onChange={this.handleChange} />
          </div>
      },
  });
  React.render(<div><HelloUniverse></HelloUniverse></div>, document.body);
2:
  var HelloWorld = React.createClass({
      render: function () { 
          return <p>Hello, {this.props.name ? this.props.name : "World"}</p>;
      },
  });
  var instance = React.render(<HelloWorld></HelloWorld>, document.body);
  instance.setProps({name: 'Tim'});
  
state
状态：事物所处的状况
状态是由事物自行处理、不断变化的
getInitialState：初始化每个实例特有的状态
setState：更新组件状态
  var HelloWorld = React.createClass({
      render: function () { 
          return <p>Hello, {this.props.name}</p>;
      },
  });
  var HelloUniverse = React.createClass({
      getInitialState: function () {
          return {
              name: 'Tim',
          };
      },
      handleChange: function (event) {                
          this.setState({name: event.target.value});
      },
      render: function () {
          return <div>
          <HelloWorld name={this.state.name}></HelloWorld>
          <br/>
          <input type="text" onChange={this.handleChange} />
          </div>
      },
  });
  React.render(<div><HelloUniverse></HelloUniverse></div>, document.body);
  
  props和state的对比：
    都是纯JS对象
    都会触发render更新
    都具有确定性
    组件在运行时需要修改的数据就是状态

